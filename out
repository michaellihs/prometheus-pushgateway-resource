#!/bin/bash

set -e

# for jq
PATH=/usr/local/bin:$PATH

cd "${1}"

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp /tmp/resource-in.XXXXXX)

# script gets payload piped in on stdin (see test/complex_metric.out for example)
cat > "${payload}" <&0

# if debug is set to true, we don't curl but only output body (for testing)
debug="$(jq -r '.source.debug // "false"' < "${payload}")"

pushgw_url="$(jq -r '.source.url' < "${payload}")"
basicauth_username="$(jq -r '.source.basicauth.username // empty' < "${payload}")"
basicauth_password="$(jq -r '.source.basicauth.password // empty' < "${payload}")"
skip_ssl_validation="$(jq -r '.source.skip_ssl_validation' < "${payload}")"
job_from_source="$(jq -r '.source.job' < "${payload}")"
job_from_params="$(jq -r '.params.job' < "${payload}")"
metric="$(jq -r '.params.metric' < "${payload}")"
value="$(jq -r '.params.value' < "${payload}")"
labels="$(jq -r '.params.labels' < "${payload}")"

# if we have a job in the parameters, override job in source
job=""
if [[ $job_from_params == 'null' ]]; then job=$job_from_source; else job=$job_from_params; fi
job=$(echo ${job} | envsubst)

# if we have a set of lables, flatten them into comma-separated string
if [[ ${labels} != 'null' ]]; then
    joined_labels=$(jq '.params.labels' < "${payload}" | jq -r 'keys[] as $k | "\($k)=\"\(.[$k])\""' | tr '\n' ' ' | sed -e 's/ /, /g' | sed -e 's/, $//g')
    metric="${metric}{${joined_labels}}"
fi

body="${metric} ${value}"
body=$(echo ${body} | envsubst)
body_escaped=${body//\"/\\\"}

debug_info=""

insecure() {
    [ "${skip_ssl_validation:-false}" == "true" ] && echo -n "--insecure"
}
insecure_enabled() {
    [ "${skip_ssl_validation:-false}" == "true" ] && echo -n '"skip_ssl_validation": "true",'
}

basicauth() {
    if [ -n "$basicauth_username" ]; then
        echo -n "--user ${basicauth_username}:${basicauth_password}"
    fi
}
basicauth_enabled() {
    if [ -n "$basicauth_username" ]; then
        echo -n '"basicauth": "enabled",'
    fi
}

# check whether we really want to send messages or just running tests (debug)
if [[ "${debug}" == "true" ]]; then
    debug_info="$(cat <<EOF
{
    "pushgw_url": "${pushgw_url}",
    $(basicauth_enabled)
    $(insecure_enabled)
    "body": "${body_escaped}",
    "job": "${job}"
}
EOF
    )"
    echo "$debug_info"
else
    echo "Sending metric: '${body}'" >&2
    echo "To Pushgateway: ${pushgw_url}/metrics/job/${job}" >&2
    echo "With arguments: $(insecure) $(basicauth | sed -e 's#:.*#:redacted#')" >&2
    echo "${body}" | curl $(insecure) $(basicauth) --fail --data-binary @- "${pushgw_url}/metrics/job/${job}" 2>&1
    return_code=$?
    if [ $return_code -eq 0 ]; then
        echo "Success: metric pushed"
    else
        echo "Error: could not push to pushgateway ($return_code)"
    fi
fi

timestamp="$(jq -n "{version:{timestamp:\"$(date +%s)\"}}")"

# send actual result to &3 since this is redirected to &1
echo "$timestamp $debug_info " | jq -s add  >&3

exit ${return_code:-0}